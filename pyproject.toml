[project]
name = "ha-battery-notes"
version = "0.0.0"
description = "HA-Battery-Notes - A Home Assistant integration to provide battery notes of devices"
authors = [{email = "Andrew Jackson <andrew@codechimp.org>"}]
maintainers = [{email = "Andrew Jackson <andrew@codechimp.org>"}]

readme = "README.md"
license = "MIT"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3",
]
requires-python = "==3.13.2"
dependencies = [
    "homeassistant==2025.4.0",
]

[project.urls]
documentation = "https://github.com/andrew-codechimp/HA-Battery-Notes"
homepage = "https://github.com/andrew-codechimp/HA-Battery-Notes"
repository = "https://github.com/andrew-codechimp/HA-Battery-Notes"
"Bug Tracker" = "https://github.com/andrew-codechimp/HA-Battery-Notes/issues"
Changelog = "https://github.com/andrew-codechimp/HA-Battery-Notes/releases"

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
    "pre-commit-hooks>=6.0.0",
    "ruff>=0.14.2",
]

[tool.ruff]
target-version = "py313"
src = ["custom_components/battery_notes"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
line-ending = "auto"

[tool.ruff.lint]
select=["ALL"]
ignore = [
  # Annotation and type hint rules
  "ANN401", # Disallowing dynamically typed expressions (too strict)

  # Docstring convention conflicts
  "D202", # No blank lines allowed after function docstring
  "D203", # 1 blank line required before class docstring
  "D213", # Multi-line docstring summary should start at the second line
  "D404", # First word of the docstring should not be "This"
  "D406", # Section name should end with a newline
  "D407", # Section name underlining
  "D411", # Missing blank line before section

  # Style/tidiness adjustments
  "TID252", # Relative imports
  "E731",   # Do not assign a lambda expression, use a def

  # Formatting conflicts (black/ruff fmt)
  "COM812",
  "COM819",
  "D206",
  "E501",   # Line too long (handled by formatter)
  "ISC001",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "W191",
  "RUF012", # Broken rule in some cases
]


[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.isort]
length-sort = true
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
known-first-party = ["homeassistant"]
combine-as-imports = true

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"homeassistant.helpers.area_registry" = "ar"
"homeassistant.helpers.config_validation" = "cv"
"homeassistant.helpers.device_registry" = "dr"
"homeassistant.helpers.entity_registry" = "er"
"homeassistant.helpers.issue_registry" = "ir"
voluptuous = "vol"

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
# check_untyped_defs = true
# disallow_any_generics = true
# disallow_incomplete_defs = true
# disallow_subclassing_any = true
# disallow_untyped_calls = true
# disallow_untyped_decorators = true
# disallow_untyped_defs = true
# no_implicit_optional = true
# strict_optional = true
# warn_incomplete_stub = true
# warn_no_return = true
# warn_redundant_casts = true
# warn_return_any = true
# warn_unused_configs = true
# warn_unused_ignores = true